using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using LitJson; //Allows to convert JSON data to an object and vice versa
using System.IO;
using System.Linq;

public class ItemDatabase : MonoBehaviour {
    private List<Item> database = new List<Item>();
    private JsonData itemData;

    private void Start()
    {
        itemData = JsonMapper.ToObject(File.ReadAllText(Application.dataPath + "/StreamingAssets/items.json"));
        CreateDatabase();
    }

    void CreateDatabase()
    {
        for (int i = 0; i < itemData.Count; i++)
        {
            if (itemData[i]["type"].ToString() == "weapon")
            {
                database.Add(new Weapon((int)itemData[i]["id"],  itemData[i]["title"].ToString(), itemData[i]["type"].ToString(), (bool)itemData[i]["stackable"], itemData[i]["spriteName"].ToString(), itemData[i]["prefabName"].ToString()));
            }
            if (itemData[i]["type"].ToString() == "consumable")
            {
                database.Add(new Consumable((int)itemData[i]["id"], itemData[i]["title"].ToString(), itemData[i]["type"].ToString(), (bool)itemData[i]["stackable"], itemData[i]["spriteName"].ToString(),
                    itemData[i]["stats"]["affects"].ToString(), (int)itemData[i]["stats"]["byAmount"]));
            }
        }
    }

    public Item getItemByID(int id)
    {
        for (int i = 0; i < database.Count;i++)
        {
            if (database[i].ID == id)
            {
                return database[i];
            }
        }
        return null;
    }
}

//Base Item class
public class Item
{
    public int ID { get; set; }
    public string Title { get; set; }
    public string Type { get; set; }
    public bool Stackable { get; set; }
    public Sprite Sprite { get; set; }

    public Item(int id, string title, string Type, bool stackable, string spriteName)
    {
        this.ID = id;
        this.Sprite = Resources.Load<Sprite>("Art/Weapons/Icons/" + spriteName);
        this.Title = title;
        this.Stackable = stackable;
    }

    public Item()
    {
        this.ID = -1;
    }
}

//Items that can be consumed
public class Consumable : Item
{
    public string Affects { get; set; }
    public int ByAmount { get; set; }

    public Consumable(int id, string title, string type, bool stackable, string spriteName, string affects, int byAmount) : base(id, title, type, stackable, spriteName)
    {
        this.ID = id;
        this.Title = title;
        this.Type = type;
        this.Stackable = stackable;
        this.Sprite = Resources.Load<Sprite>("Art/Consumables/Icons/" + spriteName);
        this.Affects = affects;
        this.ByAmount = byAmount;
    }
}

//Add class for usable items. Non-consumable

//Items that are weapons
public class Weapon : Item
{
    public string PrefabName;

    public Weapon(int id, string title, string type, bool stackable, string spriteName, string prefabName) : base(id, title, type, stackable, spriteName)
    {
        this.ID = id;
        this.Title = title;
        this.Type = type;
        this.Stackable = stackable;
        this.Sprite = Resources.Load<Sprite>("Art/Weapons/Icons/" + spriteName);
        this.PrefabName = prefabName;
    }
}
